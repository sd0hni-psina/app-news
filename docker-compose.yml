version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-newssite}
      POSTGRES_USER: ${POSTGRES_USER:-newsuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-newsuser} -d ${POSTGRES_DB:-newssite}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

  # Redis for Celery
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ –º–∏–≥—Ä–∞—Ü–∏–π
  static-init:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - static_volume:/staticfiles  # –ú–æ–Ω—Ç–∏—Ä—É–µ–º –Ω–∞ /staticfiles –≥–¥–µ Django –æ–∂–∏–¥–∞–µ—Ç
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      - DEBUG=False
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    user: "0:0"  # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∫ root –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤
    command: >
      sh -c "
        echo 'üöÄ Starting initialization...' &&
        echo 'üìÅ Creating directories and setting permissions...' &&
        mkdir -p /staticfiles /app/media &&
        chown -R 1000:1000 /staticfiles /app/media &&
        echo 'üóÑÔ∏è Running database migrations...' &&
        python manage.py migrate &&
        echo 'üì¶ Collecting static files...' &&
        python manage.py collectstatic --noinput --clear &&
        echo 'üîß Setting final permissions...' &&
        chown -R 1000:1000 /staticfiles /app/media &&
        echo '‚úÖ Initialization complete! Static files are ready.' &&
        echo 'üìä Static files summary:' &&
        find /staticfiles -type f | wc -l && echo ' files collected' &&
        ls -la /staticfiles/ &&
        echo 'üìä Admin static files:' &&
        ls -la /staticfiles/admin/ 2>/dev/null || echo 'No admin static files found'
      "
    restart: "no"

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - static_volume:/staticfiles:ro  # Read-only –¥–ª—è backend, –º–æ–Ω—Ç–∏—Ä—É–µ–º —Ç—É–¥–∞ –∂–µ –≥–¥–µ Django –æ–∂–∏–¥–∞–µ—Ç
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      - DEBUG=False
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      static-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'üåê Starting Django backend server...' &&
        echo 'üìä Verifying static files mount...' &&
        ls -la /staticfiles/admin/ 2>/dev/null || echo '‚ö†Ô∏è Admin static files not found in backend' &&
        gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120 --access-logfile - --error-logfile -
      "

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      - DEBUG=False
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    command: >
      sh -c "
        echo '‚öôÔ∏è Starting Celery worker...' &&
        celery -A config worker -l info
      "

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - media_volume:/app/media
    env_file:
      - .env
    environment:
      - DEBUG=False
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'üìÖ Starting Celery beat scheduler...' &&
        celery -A config beat -l info
      "

  # Vue.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - app-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - static_volume:/staticfiles:ro  # Nginx —á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏–∫—É –∏–∑ —Ç–æ–≥–æ –∂–µ –º–µ—Å—Ç–∞ –≥–¥–µ Django –µ—ë —Å–æ–∑–¥–∞–µ—Ç
      - media_volume:/app/media:ro
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  app-network:
    driver: bridge